// <auto-generated />
using System;
using Followers.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Followers.Model.Migrations
{
    [DbContext(typeof(FollowersDbContext))]
    [Migration("20210830151224_Migration002")]
    partial class Migration002
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Followers.Model.Clients.Db.Entities.EfClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Rank")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasCheckConstraint("CK_Clients_Id", "[Id] > 0");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Boris"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Pepa"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Anna"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Olga"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Diana"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Maria"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Stefano"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Roman"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Igor"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Vladislav"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            Name = "Elena"
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            Name = "Jee"
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            Name = "Frantisek"
                        },
                        new
                        {
                            Id = 14,
                            IsActive = true,
                            Name = "Irina"
                        });
                });

            modelBuilder.Entity("Followers.Model.Clients.Db.Entities.EfSubscriber", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscribingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientId", "SubscribingId");

                    b.HasIndex("SubscribingId");

                    b.ToTable("Subscribers");

                    b.HasCheckConstraint("CK_Subscribers_NotSelfReferenceAllowed", "[ClientId] <> [SubscribingId]");

                    b.HasCheckConstraint("CK_Subscribers_Correct_ClientId", "[ClientId] > 0");

                    b.HasCheckConstraint("CK_Subscribers_Correct_SubscribingId", "[SubscribingId] > 0");

                    b.HasData(
                        new
                        {
                            ClientId = 9,
                            SubscribingId = 1
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 12
                        },
                        new
                        {
                            ClientId = 8,
                            SubscribingId = 3
                        },
                        new
                        {
                            ClientId = 7,
                            SubscribingId = 8
                        },
                        new
                        {
                            ClientId = 7,
                            SubscribingId = 6
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 7
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 2
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 3
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 4
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 9
                        },
                        new
                        {
                            ClientId = 1,
                            SubscribingId = 14
                        },
                        new
                        {
                            ClientId = 2,
                            SubscribingId = 3
                        },
                        new
                        {
                            ClientId = 2,
                            SubscribingId = 7
                        },
                        new
                        {
                            ClientId = 2,
                            SubscribingId = 9
                        },
                        new
                        {
                            ClientId = 2,
                            SubscribingId = 1
                        },
                        new
                        {
                            ClientId = 3,
                            SubscribingId = 4
                        },
                        new
                        {
                            ClientId = 3,
                            SubscribingId = 2
                        },
                        new
                        {
                            ClientId = 3,
                            SubscribingId = 1
                        },
                        new
                        {
                            ClientId = 4,
                            SubscribingId = 8
                        },
                        new
                        {
                            ClientId = 4,
                            SubscribingId = 1
                        },
                        new
                        {
                            ClientId = 5,
                            SubscribingId = 1
                        });
                });

            modelBuilder.Entity("Followers.Model.Clients.Db.Entities.EfSubscriber", b =>
                {
                    b.HasOne("Followers.Model.Clients.Db.Entities.EfClient", "Client")
                        .WithMany("Clients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Followers.Model.Clients.Db.Entities.EfClient", "Subscribing")
                        .WithMany("Subscribings")
                        .HasForeignKey("SubscribingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Subscribing");
                });

            modelBuilder.Entity("Followers.Model.Clients.Db.Entities.EfClient", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Subscribings");
                });
#pragma warning restore 612, 618
        }
    }
}
